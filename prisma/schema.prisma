// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(uuid()) @db.Uuid
  photo       String?
  name        String @db.VarChar(100)
  user_name   String @db.VarChar(100) @unique
  email       String @db.VarChar(100) @unique
  hash        String @map("password_hash")
  accounts    String[]
  newsletter  Boolean
  recipes     Recipe[] @relation("recipesByAuthor")
  favorites   Recipe[] @relation("UserFavorites") // Изменено для явного указания связи
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @updatedAt
  @@map("users")
  Comment Comment[] @relation(name: "commentsByUser")
  refreshTokens RefreshToken[]
  Like Like[]
}

model RefreshToken {
  id        String @id @default(uuid()) @db.Uuid
  token     String   @unique
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Recipe {
  id          String @id @default(uuid()) @db.Uuid
  author_id   String @db.Uuid
  author      User  @relation(fields: [author_id], references: [id], name: "recipesByAuthor")
  favorites   User[] @relation("UserFavorites") // Изменено для явного указания связи
  image       String?
  video       String?
  rating      Int
  name        String
  category_id String  @db.Uuid
  category    Category @relation(fields: [category_id], references: [id], name: "recipesByCategory")
  trend       Int
  annotation  String?
  ingridients String[]
  nutrition   Json
  stats       Json
  directions  String[]
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @updatedAt
  @@map("recipes")
  comments Comment[] @relation(name: "commentsByRecipe")
}

model Category {
  id          String @id @default(uuid()) @db.Uuid
  name        String
  image       String
  recipes     Recipe[] @relation("recipesByCategory")
  @@map("categories")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  user_id   String  @db.Uuid
  user      User     @relation(fields: [user_id], references: [id], name: "commentsByUser")
  recipe_id String  @db.Uuid
  recipe    Recipe   @relation(fields: [recipe_id], references: [id], name: "commentsByRecipe")
  text      String
  likes     Int
  rating    Int
  replies   Comment[] @relation("CommentToReply")
  parent    Comment? @relation("CommentToReply", fields: [parentid], references: [id])
  parentid  String? @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt
  @@map("comments")
  like Like[]
}

model Like {
  id        String @id @default(uuid()) @db.Uuid
  user_id   String @db.Uuid
  user      User   @relation(fields: [user_id], references: [id])
  comment_id String @db.Uuid
  comment   Comment @relation(fields: [comment_id], references: [id])
}


